{
  "address": "0x7c35559D34AbfCd5E8D750797a02a166e2b0906D",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "SwapRequestApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "SwapRequestCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "SwapRequestCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "SwapRequestRejected",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId_",
          "type": "uint256"
        }
      ],
      "name": "approveSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId_",
          "type": "uint256"
        }
      ],
      "name": "cancelSwapRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId_",
          "type": "uint256"
        }
      ],
      "name": "rejectSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_srcAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_destToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_destAmount",
          "type": "uint256"
        }
      ],
      "name": "requestSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "srcAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "destToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "destAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum Swap.RequestStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_taxFee",
          "type": "uint8"
        }
      ],
      "name": "setTaxFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x159a1d75ad628cc9a3b24808e2d5abeb048b21647ce1d2dcec67bdedebe4734f",
  "receipt": {
    "to": null,
    "from": "0x49e6A0Eb213A7FB41a3a9e262013C090d06BE998",
    "contractAddress": "0x7c35559D34AbfCd5E8D750797a02a166e2b0906D",
    "transactionIndex": 5,
    "gasUsed": "2010472",
    "logsBloom": "0x
    "blockHash": "0x23ea34fb7aa5ef544f17c5e92c84c8d20a1d4ed7e4c53616472a505acd7c670c",
    "transactionHash": "0x159a1d75ad628cc9a3b24808e2d5abeb048b21647ce1d2dcec67bdedebe4734f",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 39774601,
        "transactionHash": "0x159a1d75ad628cc9a3b24808e2d5abeb048b21647ce1d2dcec67bdedebe4734f",
        "address": "0x7c35559D34AbfCd5E8D750797a02a166e2b0906D",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0x23ea34fb7aa5ef544f17c5e92c84c8d20a1d4ed7e4c53616472a505acd7c670c"
      }
    ],
    "blockNumber": 39774601,
    "cumulativeGasUsed": "2459588",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "8355a02c10f306e57e0978ad530d9f8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"SwapRequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"SwapRequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"SwapRequestCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"SwapRequestRejected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId_\",\"type\":\"uint256\"}],\"name\":\"approveSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId_\",\"type\":\"uint256\"}],\"name\":\"cancelSwapRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId_\",\"type\":\"uint256\"}],\"name\":\"rejectSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_destAmount\",\"type\":\"uint256\"}],\"name\":\"requestSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum Swap.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_taxFee\",\"type\":\"uint8\"}],\"name\":\"setTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swap.sol\":\"Swap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"contracts/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.24;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Swap is Initializable {\\n  struct SwapRequest {\\n    uint256 id;\\n    address sender;\\n    address receiver;\\n    address srcToken;\\n    uint256 srcAmount;\\n    address destToken;\\n    uint256 destAmount;\\n    RequestStatus status;\\n  }\\n\\n  enum RequestStatus {\\n    Pending,\\n    Cancelled,\\n    Rejected,\\n    Approved\\n  }\\n\\n  address public treasury;\\n  address public owner;\\n  uint8 public taxFee;\\n  uint256 private _requestId;\\n\\n  mapping(uint256 => SwapRequest) public requests;\\n\\n  event SwapRequestCreated(uint256 requestId);\\n  event SwapRequestApproved(uint256 requestId);\\n  event SwapRequestRejected(uint256 requestId);\\n  event SwapRequestCancelled(uint256 requestId);\\n\\n  /// @custom:oz-upgrades-unsafe-allow constructor\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  function initialize(address _treasury) public initializer {\\n    owner = msg.sender;\\n    treasury = _treasury;\\n    taxFee = 5;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"Not the owner\\\");\\n    _;\\n  }\\n\\n  function setTaxFee(uint8 _taxFee) external onlyOwner {\\n    require(_taxFee <= 100);\\n    taxFee = _taxFee;\\n  }\\n\\n  function requestSwap(\\n    address _receiver,\\n    address _srcToken,\\n    uint256 _srcAmount,\\n    address _destToken,\\n    uint256 _destAmount\\n  ) external {\\n    require(_receiver != address(0), \\\"Invalid receiver\\\");\\n    require(_srcToken != address(0), \\\"Invalid srcToken\\\");\\n    require(_destToken != address(0), \\\"Invalid destToken\\\");\\n\\n    address sender = msg.sender;\\n    IERC20 srcToken = IERC20(_srcToken);\\n    srcToken.transferFrom(sender, address(this), _srcAmount);\\n\\n    SwapRequest memory request = SwapRequest({\\n      id: ++_requestId,\\n      sender: sender,\\n      receiver: _receiver,\\n      srcToken: _srcToken,\\n      destToken: _destToken,\\n      srcAmount: _srcAmount,\\n      destAmount: _destAmount,\\n      status: RequestStatus.Pending\\n    });\\n    requests[_requestId] = request;\\n\\n    emit SwapRequestCreated(request.id);\\n  }\\n\\n  function approveSwap(uint256 _requestId_) external {\\n    SwapRequest memory request = requests[_requestId_];\\n\\n    require(request.id != 0, \\\"Request not found\\\");\\n    require(msg.sender == request.receiver, \\\"Not the receiver\\\");\\n    require(request.status == RequestStatus.Pending, \\\"Request not pending\\\");\\n\\n    IERC20 destToken = IERC20(request.destToken);\\n    IERC20 srcToken = IERC20(request.srcToken);\\n\\n    uint256 tokenAmountSenderWillReceive = ((100 - taxFee) *\\n      request.destAmount) / 100;\\n    uint256 tokenAmountReceiverWillReceive = ((100 - taxFee) *\\n      request.srcAmount) / 100;\\n\\n    destToken.transferFrom(msg.sender, address(this), request.destAmount);\\n    destToken.transfer(request.sender, tokenAmountSenderWillReceive);\\n    srcToken.transfer(msg.sender, tokenAmountReceiverWillReceive);\\n\\n    srcToken.transfer(treasury, (taxFee * request.srcAmount) / 100);\\n    destToken.transfer(treasury, (taxFee * request.destAmount) / 100);\\n\\n    requests[_requestId_].status = RequestStatus.Approved;\\n    emit SwapRequestApproved(_requestId_);\\n  }\\n\\n  function rejectSwap(uint256 _requestId_) external {\\n    SwapRequest memory request = requests[_requestId_];\\n\\n    require(request.id != 0, \\\"Request not found\\\");\\n    require(msg.sender == request.receiver, \\\"Not the receiver\\\");\\n    require(request.status == RequestStatus.Pending, \\\"Request not pending\\\");\\n    IERC20(request.srcToken).transfer(request.sender, request.srcAmount);\\n\\n    requests[_requestId_].status = RequestStatus.Rejected;\\n    emit SwapRequestRejected(_requestId_);\\n  }\\n\\n  function cancelSwapRequest(uint256 _requestId_) external {\\n    SwapRequest memory request = requests[_requestId_];\\n\\n    require(request.id != 0, \\\"Request not found\\\");\\n    require(msg.sender == request.sender, \\\"Not the sender\\\");\\n    require(request.status == RequestStatus.Pending, \\\"Request not pending\\\");\\n    IERC20(request.srcToken).transfer(msg.sender, request.srcAmount);\\n\\n    requests[_requestId_].status = RequestStatus.Cancelled;\\n    emit SwapRequestCancelled(_requestId_);\\n  }\\n}\\n\",\"keccak256\":\"0x58ae52f3add564db3df8e4b83e928cb1ba91f27ad95c741966ad260cc591cc45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b6200019c565b60006200003a6200013260201b60201c565b90508060000160089054906101000a900460ff161562000086576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146200012f5767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff6040516200012691906200017f565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b62000179816200015a565b82525050565b60006020820190506200019660008301846200016e565b92915050565b61230280620001ac6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b1797d2211610066578063b1797d2214610150578063c4d66de81461016c578063cbc2104714610188578063d04bc3f2146101a4578063e82ec7b5146101c05761009e565b80632beacb7f146100a357806361d027b3146100bf57806381d12c58146100dd5780638da5cb5b14610114578063a071dcf414610132575b600080fd5b6100bd60048036038101906100b891906119c8565b6101dc565b005b6100c76108fe565b6040516100d49190611a36565b60405180910390f35b6100f760048036038101906100f291906119c8565b610922565b60405161010b989796959493929190611ad7565b60405180910390f35b61011c6109f7565b6040516101299190611a36565b60405180910390f35b61013a610a1d565b6040516101479190611b71565b60405180910390f35b61016a60048036038101906101659190611bb8565b610a30565b005b61018660048036038101906101819190611c11565b610aef565b005b6101a2600480360381019061019d91906119c8565b610d12565b005b6101be60048036038101906101b991906119c8565b61110b565b005b6101da60048036038101906101d59190611c3e565b611508565b005b60006003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff16600381111561039857610397611a60565b5b60038111156103aa576103a9611a60565b5b81525050905060008160000151036103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90611d16565b60405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610469576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046090611d82565b60405180910390fd5b6000600381111561047d5761047c611a60565b5b8160e00151600381111561049457610493611a60565b5b146104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb90611dee565b60405180910390fd5b60008160a001519050600082606001519050600060648460c00151600160149054906101000a900460ff16606461050b9190611e3d565b60ff166105189190611e72565b6105229190611ee3565b9050600060648560800151600160149054906101000a900460ff1660646105499190611e3d565b60ff166105569190611e72565b6105609190611ee3565b90508373ffffffffffffffffffffffffffffffffffffffff166323b872dd33308860c001516040518463ffffffff1660e01b81526004016105a393929190611f14565b6020604051808303816000875af11580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e69190611f83565b508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660200151846040518363ffffffff1660e01b8152600401610626929190611fb0565b6020604051808303816000875af1158015610645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106699190611f83565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106a5929190611fb0565b6020604051808303816000875af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190611f83565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660648860800151600160149054906101000a900460ff1660ff1661074a9190611e72565b6107549190611ee3565b6040518363ffffffff1660e01b8152600401610771929190611fb0565b6020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190611f83565b508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660648860c00151600160149054906101000a900460ff1660ff166108169190611e72565b6108209190611ee3565b6040518363ffffffff1660e01b815260040161083d929190611fb0565b6020604051808303816000875af115801561085c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108809190611f83565b50600380600088815260200190815260200160002060070160006101000a81548160ff021916908360038111156108ba576108b9611a60565b5b02179055507f2c7527d32a62cb0cb74dc8b93beccab0dc451bcad6f5a697b521a844516bc250866040516108ee9190611fd9565b60405180910390a1505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900460ff16905088565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790612040565b60405180910390fd5b60648160ff161115610ad157600080fd5b80600160146101000a81548160ff021916908360ff16021790555050565b6000610af9611965565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610b475750825b9050600060018367ffffffffffffffff16148015610b7c575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610b8a575080155b15610bc1576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610c115760018560000160086101000a81548160ff0219169083151502179055505b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005600160146101000a81548160ff021916908360ff1602179055508315610d0a5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610d0191906120b9565b60405180910390a15b505050505050565b60006003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff166003811115610ece57610ecd611a60565b5b6003811115610ee057610edf611a60565b5b8152505090506000816000015103610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2490611d16565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9690612120565b60405180910390fd5b60006003811115610fb357610fb2611a60565b5b8160e001516003811115610fca57610fc9611a60565b5b1461100a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100190611dee565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383608001516040518363ffffffff1660e01b815260040161104d929190611fb0565b6020604051808303816000875af115801561106c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110909190611f83565b5060016003600084815260200190815260200160002060070160006101000a81548160ff021916908360038111156110cb576110ca611a60565b5b02179055507f1bfd07a0b46ace4436adac2a6736e704c48d823ee42794668a933dd3ae12d2d5826040516110ff9190611fd9565b60405180910390a15050565b60006003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff1660038111156112c7576112c6611a60565b5b60038111156112d9576112d8611a60565b5b8152505090506000816000015103611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90611d16565b60405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138f90611d82565b60405180910390fd5b600060038111156113ac576113ab611a60565b5b8160e0015160038111156113c3576113c2611a60565b5b14611403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fa90611dee565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826020015183608001516040518363ffffffff1660e01b815260040161144a929190611fb0565b6020604051808303816000875af1158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190611f83565b5060026003600084815260200190815260200160002060070160006101000a81548160ff021916908360038111156114c8576114c7611a60565b5b02179055507fcaa5273972a88303236b0f33a1716631487993917bfc6e07e445c28fd1b01093826040516114fc9190611fd9565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156e9061218c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd906121f8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c90612264565b60405180910390fd5b600033905060008590508073ffffffffffffffffffffffffffffffffffffffff166323b872dd8330886040518463ffffffff1660e01b815260040161169c93929190611f14565b6020604051808303816000875af11580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190611f83565b5060006040518061010001604052806002600081546116fd90612284565b91905081905581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016000600381111561179857611797611a60565b5b8152509050806003600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070160006101000a81548160ff0219169083600381111561191857611917611a60565b5b02179055509050507f6a4a572a8a57b082c17184a2cbbb87b8c58e27e710345eba0cf2827c9612c9c781600001516040516119539190611fd9565b60405180910390a15050505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600080fd5b6000819050919050565b6119a581611992565b81146119b057600080fd5b50565b6000813590506119c28161199c565b92915050565b6000602082840312156119de576119dd61198d565b5b60006119ec848285016119b3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a20826119f5565b9050919050565b611a3081611a15565b82525050565b6000602082019050611a4b6000830184611a27565b92915050565b611a5a81611992565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611aa057611a9f611a60565b5b50565b6000819050611ab182611a8f565b919050565b6000611ac182611aa3565b9050919050565b611ad181611ab6565b82525050565b600061010082019050611aed600083018b611a51565b611afa602083018a611a27565b611b076040830189611a27565b611b146060830188611a27565b611b216080830187611a51565b611b2e60a0830186611a27565b611b3b60c0830185611a51565b611b4860e0830184611ac8565b9998505050505050505050565b600060ff82169050919050565b611b6b81611b55565b82525050565b6000602082019050611b866000830184611b62565b92915050565b611b9581611b55565b8114611ba057600080fd5b50565b600081359050611bb281611b8c565b92915050565b600060208284031215611bce57611bcd61198d565b5b6000611bdc84828501611ba3565b91505092915050565b611bee81611a15565b8114611bf957600080fd5b50565b600081359050611c0b81611be5565b92915050565b600060208284031215611c2757611c2661198d565b5b6000611c3584828501611bfc565b91505092915050565b600080600080600060a08688031215611c5a57611c5961198d565b5b6000611c6888828901611bfc565b9550506020611c7988828901611bfc565b9450506040611c8a888289016119b3565b9350506060611c9b88828901611bfc565b9250506080611cac888289016119b3565b9150509295509295909350565b600082825260208201905092915050565b7f52657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000611d00601183611cb9565b9150611d0b82611cca565b602082019050919050565b60006020820190508181036000830152611d2f81611cf3565b9050919050565b7f4e6f742074686520726563656976657200000000000000000000000000000000600082015250565b6000611d6c601083611cb9565b9150611d7782611d36565b602082019050919050565b60006020820190508181036000830152611d9b81611d5f565b9050919050565b7f52657175657374206e6f742070656e64696e6700000000000000000000000000600082015250565b6000611dd8601383611cb9565b9150611de382611da2565b602082019050919050565b60006020820190508181036000830152611e0781611dcb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e4882611b55565b9150611e5383611b55565b9250828203905060ff811115611e6c57611e6b611e0e565b5b92915050565b6000611e7d82611992565b9150611e8883611992565b9250828202611e9681611992565b91508282048414831517611ead57611eac611e0e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611eee82611992565b9150611ef983611992565b925082611f0957611f08611eb4565b5b828204905092915050565b6000606082019050611f296000830186611a27565b611f366020830185611a27565b611f436040830184611a51565b949350505050565b60008115159050919050565b611f6081611f4b565b8114611f6b57600080fd5b50565b600081519050611f7d81611f57565b92915050565b600060208284031215611f9957611f9861198d565b5b6000611fa784828501611f6e565b91505092915050565b6000604082019050611fc56000830185611a27565b611fd26020830184611a51565b9392505050565b6000602082019050611fee6000830184611a51565b92915050565b7f4e6f7420746865206f776e657200000000000000000000000000000000000000600082015250565b600061202a600d83611cb9565b915061203582611ff4565b602082019050919050565b600060208201905081810360008301526120598161201d565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006120a361209e61209984612060565b61207e565b61206a565b9050919050565b6120b381612088565b82525050565b60006020820190506120ce60008301846120aa565b92915050565b7f4e6f74207468652073656e646572000000000000000000000000000000000000600082015250565b600061210a600e83611cb9565b9150612115826120d4565b602082019050919050565b60006020820190508181036000830152612139816120fd565b9050919050565b7f496e76616c696420726563656976657200000000000000000000000000000000600082015250565b6000612176601083611cb9565b915061218182612140565b602082019050919050565b600060208201905081810360008301526121a581612169565b9050919050565b7f496e76616c696420737263546f6b656e00000000000000000000000000000000600082015250565b60006121e2601083611cb9565b91506121ed826121ac565b602082019050919050565b60006020820190508181036000830152612211816121d5565b9050919050565b7f496e76616c69642064657374546f6b656e000000000000000000000000000000600082015250565b600061224e601183611cb9565b915061225982612218565b602082019050919050565b6000602082019050818103600083015261227d81612241565b9050919050565b600061228f82611992565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122c1576122c0611e0e565b5b60018201905091905056fea2646970667358221220abf29604dc0aa7a84ec92e412103748af49e1e9ffe05c86e6c51654771c6ef3464736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063b1797d2211610066578063b1797d2214610150578063c4d66de81461016c578063cbc2104714610188578063d04bc3f2146101a4578063e82ec7b5146101c05761009e565b80632beacb7f146100a357806361d027b3146100bf57806381d12c58146100dd5780638da5cb5b14610114578063a071dcf414610132575b600080fd5b6100bd60048036038101906100b891906119c8565b6101dc565b005b6100c76108fe565b6040516100d49190611a36565b60405180910390f35b6100f760048036038101906100f291906119c8565b610922565b60405161010b989796959493929190611ad7565b60405180910390f35b61011c6109f7565b6040516101299190611a36565b60405180910390f35b61013a610a1d565b6040516101479190611b71565b60405180910390f35b61016a60048036038101906101659190611bb8565b610a30565b005b61018660048036038101906101819190611c11565b610aef565b005b6101a2600480360381019061019d91906119c8565b610d12565b005b6101be60048036038101906101b991906119c8565b61110b565b005b6101da60048036038101906101d59190611c3e565b611508565b005b60006003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff16600381111561039857610397611a60565b5b60038111156103aa576103a9611a60565b5b81525050905060008160000151036103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90611d16565b60405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610469576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046090611d82565b60405180910390fd5b6000600381111561047d5761047c611a60565b5b8160e00151600381111561049457610493611a60565b5b146104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb90611dee565b60405180910390fd5b60008160a001519050600082606001519050600060648460c00151600160149054906101000a900460ff16606461050b9190611e3d565b60ff166105189190611e72565b6105229190611ee3565b9050600060648560800151600160149054906101000a900460ff1660646105499190611e3d565b60ff166105569190611e72565b6105609190611ee3565b90508373ffffffffffffffffffffffffffffffffffffffff166323b872dd33308860c001516040518463ffffffff1660e01b81526004016105a393929190611f14565b6020604051808303816000875af11580156105c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e69190611f83565b508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8660200151846040518363ffffffff1660e01b8152600401610626929190611fb0565b6020604051808303816000875af1158015610645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106699190611f83565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016106a5929190611fb0565b6020604051808303816000875af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190611f83565b508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660648860800151600160149054906101000a900460ff1660ff1661074a9190611e72565b6107549190611ee3565b6040518363ffffffff1660e01b8152600401610771929190611fb0565b6020604051808303816000875af1158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190611f83565b508373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660648860c00151600160149054906101000a900460ff1660ff166108169190611e72565b6108209190611ee3565b6040518363ffffffff1660e01b815260040161083d929190611fb0565b6020604051808303816000875af115801561085c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108809190611f83565b50600380600088815260200190815260200160002060070160006101000a81548160ff021916908360038111156108ba576108b9611a60565b5b02179055507f2c7527d32a62cb0cb74dc8b93beccab0dc451bcad6f5a697b521a844516bc250866040516108ee9190611fd9565b60405180910390a1505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60036020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040154908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070160009054906101000a900460ff16905088565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900460ff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790612040565b60405180910390fd5b60648160ff161115610ad157600080fd5b80600160146101000a81548160ff021916908360ff16021790555050565b6000610af9611965565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610b475750825b9050600060018367ffffffffffffffff16148015610b7c575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610b8a575080155b15610bc1576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610c115760018560000160086101000a81548160ff0219169083151502179055505b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550856000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005600160146101000a81548160ff021916908360ff1602179055508315610d0a5760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d26001604051610d0191906120b9565b60405180910390a15b505050505050565b60006003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff166003811115610ece57610ecd611a60565b5b6003811115610ee057610edf611a60565b5b8152505090506000816000015103610f2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2490611d16565b60405180910390fd5b806020015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9690612120565b60405180910390fd5b60006003811115610fb357610fb2611a60565b5b8160e001516003811115610fca57610fc9611a60565b5b1461100a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100190611dee565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383608001516040518363ffffffff1660e01b815260040161104d929190611fb0565b6020604051808303816000875af115801561106c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110909190611f83565b5060016003600084815260200190815260200160002060070160006101000a81548160ff021916908360038111156110cb576110ca611a60565b5b02179055507f1bfd07a0b46ace4436adac2a6736e704c48d823ee42794668a933dd3ae12d2d5826040516110ff9190611fd9565b60405180910390a15050565b60006003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600682015481526020016007820160009054906101000a900460ff1660038111156112c7576112c6611a60565b5b60038111156112d9576112d8611a60565b5b8152505090506000816000015103611326576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131d90611d16565b60405180910390fd5b806040015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138f90611d82565b60405180910390fd5b600060038111156113ac576113ab611a60565b5b8160e0015160038111156113c3576113c2611a60565b5b14611403576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fa90611dee565b60405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb826020015183608001516040518363ffffffff1660e01b815260040161144a929190611fb0565b6020604051808303816000875af1158015611469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148d9190611f83565b5060026003600084815260200190815260200160002060070160006101000a81548160ff021916908360038111156114c8576114c7611a60565b5b02179055507fcaa5273972a88303236b0f33a1716631487993917bfc6e07e445c28fd1b01093826040516114fc9190611fd9565b60405180910390a15050565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611577576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156e9061218c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd906121f8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611655576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164c90612264565b60405180910390fd5b600033905060008590508073ffffffffffffffffffffffffffffffffffffffff166323b872dd8330886040518463ffffffff1660e01b815260040161169c93929190611f14565b6020604051808303816000875af11580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190611f83565b5060006040518061010001604052806002600081546116fd90612284565b91905081905581526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016000600381111561179857611797611a60565b5b8152509050806003600060025481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c0820151816006015560e08201518160070160006101000a81548160ff0219169083600381111561191857611917611a60565b5b02179055509050507f6a4a572a8a57b082c17184a2cbbb87b8c58e27e710345eba0cf2827c9612c9c781600001516040516119539190611fd9565b60405180910390a15050505050505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600080fd5b6000819050919050565b6119a581611992565b81146119b057600080fd5b50565b6000813590506119c28161199c565b92915050565b6000602082840312156119de576119dd61198d565b5b60006119ec848285016119b3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a20826119f5565b9050919050565b611a3081611a15565b82525050565b6000602082019050611a4b6000830184611a27565b92915050565b611a5a81611992565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110611aa057611a9f611a60565b5b50565b6000819050611ab182611a8f565b919050565b6000611ac182611aa3565b9050919050565b611ad181611ab6565b82525050565b600061010082019050611aed600083018b611a51565b611afa602083018a611a27565b611b076040830189611a27565b611b146060830188611a27565b611b216080830187611a51565b611b2e60a0830186611a27565b611b3b60c0830185611a51565b611b4860e0830184611ac8565b9998505050505050505050565b600060ff82169050919050565b611b6b81611b55565b82525050565b6000602082019050611b866000830184611b62565b92915050565b611b9581611b55565b8114611ba057600080fd5b50565b600081359050611bb281611b8c565b92915050565b600060208284031215611bce57611bcd61198d565b5b6000611bdc84828501611ba3565b91505092915050565b611bee81611a15565b8114611bf957600080fd5b50565b600081359050611c0b81611be5565b92915050565b600060208284031215611c2757611c2661198d565b5b6000611c3584828501611bfc565b91505092915050565b600080600080600060a08688031215611c5a57611c5961198d565b5b6000611c6888828901611bfc565b9550506020611c7988828901611bfc565b9450506040611c8a888289016119b3565b9350506060611c9b88828901611bfc565b9250506080611cac888289016119b3565b9150509295509295909350565b600082825260208201905092915050565b7f52657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000611d00601183611cb9565b9150611d0b82611cca565b602082019050919050565b60006020820190508181036000830152611d2f81611cf3565b9050919050565b7f4e6f742074686520726563656976657200000000000000000000000000000000600082015250565b6000611d6c601083611cb9565b9150611d7782611d36565b602082019050919050565b60006020820190508181036000830152611d9b81611d5f565b9050919050565b7f52657175657374206e6f742070656e64696e6700000000000000000000000000600082015250565b6000611dd8601383611cb9565b9150611de382611da2565b602082019050919050565b60006020820190508181036000830152611e0781611dcb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611e4882611b55565b9150611e5383611b55565b9250828203905060ff811115611e6c57611e6b611e0e565b5b92915050565b6000611e7d82611992565b9150611e8883611992565b9250828202611e9681611992565b91508282048414831517611ead57611eac611e0e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611eee82611992565b9150611ef983611992565b925082611f0957611f08611eb4565b5b828204905092915050565b6000606082019050611f296000830186611a27565b611f366020830185611a27565b611f436040830184611a51565b949350505050565b60008115159050919050565b611f6081611f4b565b8114611f6b57600080fd5b50565b600081519050611f7d81611f57565b92915050565b600060208284031215611f9957611f9861198d565b5b6000611fa784828501611f6e565b91505092915050565b6000604082019050611fc56000830185611a27565b611fd26020830184611a51565b9392505050565b6000602082019050611fee6000830184611a51565b92915050565b7f4e6f7420746865206f776e657200000000000000000000000000000000000000600082015250565b600061202a600d83611cb9565b915061203582611ff4565b602082019050919050565b600060208201905081810360008301526120598161201d565b9050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006120a361209e61209984612060565b61207e565b61206a565b9050919050565b6120b381612088565b82525050565b60006020820190506120ce60008301846120aa565b92915050565b7f4e6f74207468652073656e646572000000000000000000000000000000000000600082015250565b600061210a600e83611cb9565b9150612115826120d4565b602082019050919050565b60006020820190508181036000830152612139816120fd565b9050919050565b7f496e76616c696420726563656976657200000000000000000000000000000000600082015250565b6000612176601083611cb9565b915061218182612140565b602082019050919050565b600060208201905081810360008301526121a581612169565b9050919050565b7f496e76616c696420737263546f6b656e00000000000000000000000000000000600082015250565b60006121e2601083611cb9565b91506121ed826121ac565b602082019050919050565b60006020820190508181036000830152612211816121d5565b9050919050565b7f496e76616c69642064657374546f6b656e000000000000000000000000000000600082015250565b600061224e601183611cb9565b915061225982612218565b602082019050919050565b6000602082019050818103600083015261227d81612241565b9050919050565b600061228f82611992565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036122c1576122c0611e0e565b5b60018201905091905056fea2646970667358221220abf29604dc0aa7a84ec92e412103748af49e1e9ffe05c86e6c51654771c6ef3464736f6c63430008180033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 362,
        "contract": "contracts/Swap.sol:Swap",
        "label": "treasury",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 364,
        "contract": "contracts/Swap.sol:Swap",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 366,
        "contract": "contracts/Swap.sol:Swap",
        "label": "taxFee",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 368,
        "contract": "contracts/Swap.sol:Swap",
        "label": "_requestId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 373,
        "contract": "contracts/Swap.sol:Swap",
        "label": "requests",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(SwapRequest)355_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(RequestStatus)360": {
        "encoding": "inplace",
        "label": "enum Swap.RequestStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(SwapRequest)355_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Swap.SwapRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapRequest)355_storage"
      },
      "t_struct(SwapRequest)355_storage": {
        "encoding": "inplace",
        "label": "struct Swap.SwapRequest",
        "members": [
          {
            "astId": 339,
            "contract": "contracts/Swap.sol:Swap",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 341,
            "contract": "contracts/Swap.sol:Swap",
            "label": "sender",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 343,
            "contract": "contracts/Swap.sol:Swap",
            "label": "receiver",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 345,
            "contract": "contracts/Swap.sol:Swap",
            "label": "srcToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 347,
            "contract": "contracts/Swap.sol:Swap",
            "label": "srcAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 349,
            "contract": "contracts/Swap.sol:Swap",
            "label": "destToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 351,
            "contract": "contracts/Swap.sol:Swap",
            "label": "destAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 354,
            "contract": "contracts/Swap.sol:Swap",
            "label": "status",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(RequestStatus)360"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}